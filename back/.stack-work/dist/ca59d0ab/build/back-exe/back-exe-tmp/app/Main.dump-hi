
==================== FINAL INTERFACE ====================
2017-04-01 19:40:22.8076622 UTC

interface main@main:Main 8002
  interface hash: 14c36aff41ccbf2a8a1726693ee081d9
  ABI hash: 60b63c0075ba78ebfb88aae962cb92e4
  export-list hash: 3ef15a2c9672bd7355278d90208c22d7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 40576c4d17505373ba9384334098931e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.main2
  Main.TestField{Main.TestField}
module dependencies:
package dependencies: Win32-2.3.1.1@Win32-2.3.1.1
                      aeson-1.0.2.1@aeson-1.0.2.1-60dJEdlSbvM83Y5YfL8CWn
                      appar-0.1.4@appar-0.1.4-DGWHHt2WRn9FI49prcwO9
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1@async-2.1.1-4n6HEMPJR2eJK0JpvCfuPK
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU
                      auto-update-0.1.4@auto-update-0.1.4-EmUvNdmhEju51bHrtaEMpz
                      back-0.1.0.0@back-0.1.0.0-7YKhG83L72VA823YDHbFJ0 base-4.9.1.0
                      base-compat-0.9.2@base-compat-0.9.2-3Rp79AeCFKJ4blfnCflOJE
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-4O9TExPPz6eI82Yj7L4SIj
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-CGB8BvrFgghHy5bLy0SFOg
                      blaze-html-0.8.1.3@blaze-html-0.8.1.3-4x5sR7CihaZBuBa398ibiy
                      blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-7tIWNv8iALFJhJ4kVxNmNT
                      blaze-textual-0.2.1.0@blaze-textual-0.2.1.0-GUQiYWWxIi0L6FRzgIE5JF
                      byteorder-1.0.4@byteorder-1.0.4-9NlNHkBVdo7F1prFVKrkcH
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.8@case-insensitive-1.2.0.8-336s2tfPdxOEPgnLH8r0bz
                      containers-0.5.7.1@containers-0.5.7.1
                      cryptonite-0.21@cryptonite-0.21-1B7RRYQvoCmIU1q8AiQfbe
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      direct-sqlite-2.3.19@direct-sqlite-2.3.19-HHlUsN8cUcIK9krg9k4o1U
                      directory-1.3.0.0@directory-1.3.0.0
                      dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD
                      file-embed-0.0.10@file-embed-0.0.10-KWMmUDaNSRP7AxWSEHlrrK
                      filepath-1.4.1.1@filepath-1.4.1.1
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11
                      http-date-0.0.6.1@http-date-0.0.6.1-GjuZLg09ks27Bd9oI0ciJu
                      http-media-0.6.4@http-media-0.6.4-Ic2rsgpbcUZCv89ocBCZpr
                      http-types-0.9.1@http-types-0.9.1-5rMGX8lemrMDaQeDulF4OF
                      http2-1.6.3@http2-1.6.3-82OptI2A5ESI6RhudSAT6 integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      iproute-1.7.1@iproute-1.7.1-1VmXzmOljuk9tg4pg6dAZJ
                      memory-0.14.2@memory-0.14.2-CfVX41PhmpJKBOUPv4ybaa
                      mime-types-0.1.0.7@mime-types-0.1.0.7-31dnC2ifQ9r5TApUZagLPk
                      mmorph-1.0.9@mmorph-1.0.9-5bASEvmIkr5CpdAYXwPsn0
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-2.6.3.1@network-2.6.3.1-AwRxOQvT8JM9e8zDFK7aCI
                      network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      psqueues-0.2.2.3@psqueues-0.2.2.3-9nDehYbroydEusqdFJopTa
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.4.10@scientific-0.3.4.10-70WEAestTPg2u2sFCYJUhG
                      servant-0.9.1.1@servant-0.9.1.1-Iof0bMTijI52eb96FI39fH
                      servant-server-0.9.1.1@servant-server-0.9.1.1-IMtoMzX5VkK53PVJTEcEGX
                      sqlite-simple-0.4.13.0@sqlite-simple-0.4.13.0-PSIT93wPIZJ2QPy2g7bsr
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      streaming-commons-0.1.17@streaming-commons-0.1.17-68TIrPMbDcW6Be9IWoxgJG
                      string-conversions-0.4.0.1@string-conversions-0.4.0.1-5bhARACLQyXG4DLNegoSj4
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps
                      th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unix-compat-0.4.3.1@unix-compat-0.4.3.1-4J6CourUSTG17Ll1LWtjiq
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o
                      uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
                      uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl
                      vault-0.3.0.6@vault-0.3.0.6-1vXP2sqILbxIC44bzfQYGg
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
                      wai-3.2.1.1@wai-3.2.1.1-4w3sMSjZRwHCHU7BtBLTBf
                      wai-app-static-3.1.6.1@wai-app-static-3.1.6.1-BdJvNvIWJLjHMm6DTxV1t8
                      warp-3.2.11.1@warp-3.2.11.1-K7D7WZmP9fZyBdZB2r9W5
                      word8-0.1.2@word8-0.1.2-9WDPGCTpW7JJnsiAQavtd1
                      zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         network-2.6.3.1@network-2.6.3.1-AwRxOQvT8JM9e8zDFK7aCI:Network.Socket
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         th-lift-0.7.6@th-lift-0.7.6-BJcuQtn7dnPzL4YOk4wps:Language.Haskell.TH.Lift
         th-lift-instances-0.1.11@th-lift-instances-0.1.11-C7WWQYsyhhMpc6laO6Bed:Instances.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-1ABl8gBrvGSCXKXEElG6rU:Data.Attoparsec.Internal.Types
                         back-0.1.0.0@back-0.1.0.0-7YKhG83L72VA823YDHbFJ0:App
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         http-api-data-0.3.5@http-api-data-0.3.5-I8V2cgXR5W924Ax42O3A11:Web.Internal.FormUrlEncoded
                         iproute-1.7.1@iproute-1.7.1-1VmXzmOljuk9tg4pg6dAZJ:Data.IP.Addr
                         iproute-1.7.1@iproute-1.7.1-1VmXzmOljuk9tg4pg6dAZJ:Data.IP.Range
                         network-uri-2.6.1.0@network-uri-2.6.1.0-EwGrJ9bdUqR1E7dAIJ4cwF:Network.URI
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         servant-0.9.1.1@servant-0.9.1.1-Iof0bMTijI52eb96FI39fH:Servant.API.ContentTypes
                         servant-0.9.1.1@servant-0.9.1.1-Iof0bMTijI52eb96FI39fH:Servant.API.IsSecure
                         servant-0.9.1.1@servant-0.9.1.1-Iof0bMTijI52eb96FI39fH:Servant.API.Verbs
                         servant-0.9.1.1@servant-0.9.1.1-Iof0bMTijI52eb96FI39fH:Servant.Utils.Links
                         servant-server-0.9.1.1@servant-server-0.9.1.1-IMtoMzX5VkK53PVJTEcEGX:Servant.Server.Internal
                         servant-server-0.9.1.1@servant-server-0.9.1.1-IMtoMzX5VkK53PVJTEcEGX:Servant.Server.Internal.BasicAuth
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashSet
                         uri-bytestring-0.2.3.1@uri-bytestring-0.2.3.1-6LL9CpgznmMIcIWZQ2UZ46:URI.ByteString.Types
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-29hQYgnErrj49JbrlmjGHl:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp:Codec.Compression.Zlib.Stream
import  -/  back-0.1.0.0@back-0.1.0.0-7YKhG83L72VA823YDHbFJ0:App 1b731ede1cc1bdccbc99d92e348261c3
import  -/  base-4.9.1.0:Control.Applicative 2c56a0c43327cbbcb6e7a55bf05443c9
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.Functor 682cc832c233b71cec70179490a08631
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:System.IO 5daf3f384209c11d9566e3409af8ec5d
import  -/  directory-1.3.0.0@directory-1.3.0.0:System.Directory 4f448ef742f586f293d03ae3d978f8f8
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  sqlite-simple-0.4.13.0@sqlite-simple-0.4.13.0-PSIT93wPIZJ2QPy2g7bsr:Database.SQLite.Simple e7e81175164bd5751d52b81e0201bff1
import  -/  sqlite-simple-0.4.13.0@sqlite-simple-0.4.13.0-PSIT93wPIZJ2QPy2g7bsr:Database.SQLite.Simple.FromRow 9b33ca261295132f87dc034b40e5a9dc
import  -/  sqlite-simple-0.4.13.0@sqlite-simple-0.4.13.0-PSIT93wPIZJ2QPy2g7bsr:Database.SQLite.Simple.Types e8a60d2e054019db73bf92bd85247b72
7d780bd49e32d3e91c8ac15c491a609a
  $fFromRowTestField ::
    Database.SQLite.Simple.FromRow.FromRow Main.TestField
  DFunId
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S(S)L),1*U(1*U(U),1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromRowTestField_$cfromRow
                  `cast`
                (Sym (Database.SQLite.Simple.FromRow.N:FromRow[0]) <Main.TestField>_N) -}
7d780bd49e32d3e91c8ac15c491a609a
  $fFromRowTestField1 ::
    Database.SQLite.Simple.Internal.RowParseRO
    -> (GHC.Types.Int, [Database.SQLite3.SQLData])
    -> Database.SQLite.Simple.Ok.Ok
         (Main.TestField, (GHC.Types.Int, [Database.SQLite3.SQLData]))
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S(S)L),1*U(1*U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Database.SQLite.Simple.Internal.RowParseRO)
                   (w1 :: (GHC.Types.Int, [Database.SQLite3.SQLData])) ->
                 case w `cast`
                      (Database.SQLite.Simple.Internal.N:RowParseRO[0]) of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { (,) ww3 ww4 ->
                 case ww3 of ww5 { GHC.Types.I# ww6 ->
                 Main.$w$cfromRow ww1 ww6 ww4 } } }) -}
7d780bd49e32d3e91c8ac15c491a609a
  $fFromRowTestField_$cfromRow ::
    Database.SQLite.Simple.Internal.RowParser Main.TestField
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S(S)L),1*U(1*U(U),1*U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fFromRowTestField1
                  `cast`
                (Trans
                     (<Database.SQLite.Simple.Internal.RowParseRO>_R
                      ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <(GHC.Types.Int, [Database.SQLite3.SQLData])>_N
                                    <Database.SQLite.Simple.Ok.Ok>_R
                                    <Main.TestField>_N))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Database.SQLite.Simple.Internal.RowParseRO>_R
                                    <Control.Monad.Trans.State.Strict.StateT
                                       (GHC.Types.Int, [Database.SQLite3.SQLData])
                                       Database.SQLite.Simple.Ok.Ok>_R
                                    <Main.TestField>_N))
                          (Sym (Database.SQLite.Simple.Internal.N:RowParser[0]) <Main.TestField>_N))) -}
7d780bd49e32d3e91c8ac15c491a609a
  $fShowTestField :: GHC.Show.Show Main.TestField
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.TestField
                  Main.$fShowTestField_$cshowsPrec
                  Main.$fShowTestField_$cshow
                  Main.$fShowTestField_$cshowList -}
7d780bd49e32d3e91c8ac15c491a609a
  $fShowTestField1 :: Main.TestField -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.TestField) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.TestField ww1 ww2 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
003386b9573c306785de5b179cd64d58
  $fShowTestField2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TestField "#) -}
7d780bd49e32d3e91c8ac15c491a609a
  $fShowTestField_$cshow :: Main.TestField -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.TestField) ->
                 Main.$fShowTestField_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7d780bd49e32d3e91c8ac15c491a609a
  $fShowTestField_$cshowList :: [Main.TestField] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.TestField
                   Main.$fShowTestField1) -}
7d780bd49e32d3e91c8ac15c491a609a
  $fShowTestField_$cshowsPrec ::
    GHC.Types.Int -> Main.TestField -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.TestField)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.TestField ww3 ww4 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
7bdfd32b52bf09534d7bf6826346fe33
  $tc'TestField :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12520738042692316075##
                   13374070315493668554##
                   Main.$trModule
                   Main.$tc'TestField1) -}
fbf7a9e16e5ea441352da9aa2f07823b
  $tc'TestField1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TestField"#) -}
1df641b7a68ade584c3d9ad6cddb586e
  $tcTestField :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12784335395132859770##
                   4306097267772646268##
                   Main.$trModule
                   Main.$tcTestField1) -}
2d995333458e9c52a15e9bf1e07f6ad6
  $tcTestField1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TestField"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
7d780bd49e32d3e91c8ac15c491a609a
  $w$cfromRow ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Database.SQLite3.SQLData]
    -> Database.SQLite.Simple.Ok.Ok
         (Main.TestField, (GHC.Types.Int, [Database.SQLite3.SQLData]))
  {- Arity: 3, Strictness: <S,U><S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: [Database.SQLite3.SQLData]) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww1 ww) of wild {
                   GHC.Types.False
                   -> case ww2 of wild1 {
                        []
                        -> case GHC.List.badHead
                           ret_ty (Database.SQLite.Simple.Ok.Ok
                                     (Main.TestField, (GHC.Types.Int, [Database.SQLite3.SQLData])))
                           of {}
                        : x ds1
                        -> case Database.SQLite.Simple.FromField.$w$stakeInt x of wild2 {
                             Database.SQLite.Simple.Ok.Errors es
                             -> Database.SQLite.Simple.Ok.Errors
                                  @ (Main.TestField, (GHC.Types.Int, [Database.SQLite3.SQLData]))
                                  es
                             Database.SQLite.Simple.Ok.Ok a1
                             -> let {
                                  s' :: GHC.Prim.Int# = GHC.Prim.+# ww1 1#
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>=# s' ww) of wild3 {
                                  GHC.Types.False
                                  -> case ds1 of wild4 {
                                       []
                                       -> case GHC.List.badHead
                                          ret_ty (Database.SQLite.Simple.Ok.Ok
                                                    (Main.TestField,
                                                     (GHC.Types.Int, [Database.SQLite3.SQLData])))
                                          of {}
                                       : x1 ds2
                                       -> case Database.SQLite.Simple.FromField.$w$cfromField11
                                                 x1 of wild5 {
                                            Database.SQLite.Simple.Ok.Errors es
                                            -> Database.SQLite.Simple.Ok.Errors
                                                 @ (Main.TestField,
                                                    (GHC.Types.Int, [Database.SQLite3.SQLData]))
                                                 es
                                            Database.SQLite.Simple.Ok.Ok a2
                                            -> Database.SQLite.Simple.Ok.Ok
                                                 @ (Main.TestField,
                                                    (GHC.Types.Int, [Database.SQLite3.SQLData]))
                                                 (Main.TestField a1 a2,
                                                  (GHC.Types.I# (GHC.Prim.+# s' 1#), ds2)) } }
                                  GHC.Types.True
                                  -> Database.SQLite.Simple.Ok.Errors
                                       @ (Main.TestField,
                                          (GHC.Types.Int, [Database.SQLite3.SQLData]))
                                       (GHC.Types.:
                                          @ GHC.Exception.SomeException
                                          (GHC.Exception.SomeException
                                             @ Database.SQLite.Simple.Internal.ColumnOutOfBounds
                                             Database.SQLite.Simple.Internal.$fExceptionColumnOutOfBounds
                                             (Database.SQLite.Simple.Internal.ColumnOutOfBounds
                                                (GHC.Prim.+# s' 1#)))
                                          (GHC.Types.[] @ GHC.Exception.SomeException)) } } }
                   GHC.Types.True
                   -> Database.SQLite.Simple.Ok.Errors
                        @ (Main.TestField, (GHC.Types.Int, [Database.SQLite3.SQLData]))
                        (GHC.Types.:
                           @ GHC.Exception.SomeException
                           (GHC.Exception.SomeException
                              @ Database.SQLite.Simple.Internal.ColumnOutOfBounds
                              Database.SQLite.Simple.Internal.$fExceptionColumnOutOfBounds
                              (Database.SQLite.Simple.Internal.ColumnOutOfBounds
                                 (GHC.Prim.+# ww1 1#)))
                           (GHC.Types.[] @ GHC.Exception.SomeException)) }) -}
a39021333e23222017a79e53a9a5a7f0
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U(U)><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Base.String)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowTestField2
                       (case ww1 of ww3 { GHC.Types.I# ww4 ->
                        case GHC.Show.$wshowSignedInt
                               11#
                               ww4
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows6
                                     (GHC.Show.showLitString
                                        ww2
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows6
                                           x)))) of ww5 { (#,#) ww6 ww7 ->
                        GHC.Types.: @ GHC.Types.Char ww6 ww7 } })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
a22178114454506c132fac24348570e1
  $wouter ::
    Data.Text.Array.MArray GHC.Prim.RealWorld
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><S,U><S,U>,
     Inline: [0] -}
7d780bd49e32d3e91c8ac15c491a609a
  data TestField = TestField GHC.Types.Int GHC.Base.String
0e6e5114c7672573134c207e838f51d9
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                App.run1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
92fe2e5f93ac7ca6a4a0b46c80178a70
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   App.run1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
8e087352ffb7549e92899564d7a1f2a6
  main10 :: GHC.Types.IO GHC.Base.String
  {- Unfolding: (GHC.Magic.lazy
                   @ (GHC.Types.IO GHC.Base.String)
                   System.Directory.getCurrentDirectory2
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))) -}
1ecd9c7e779cbb00bdac6905c2d49afa
  main2 :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main3 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
f91f6b9f39fea933d5000211fa41482a
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        Main.main10 `cast` (GHC.Types.N:IO[0] <GHC.Base.String>_R)
                        Main.main9
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Show.$fShow[]_$s$cshow1 ipv1)
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Database.SQLite.Simple.open1
                        Main.main8
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "INSERT INTO test (str) VALUES (?)"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Database.SQLite.Simple.$wwithStatementParams
                        @ (Database.SQLite.Simple.Types.Only GHC.Base.String)
                        @ ()
                        Main.main6
                          `cast`
                        (Sym (Database.SQLite.Simple.ToRow.N:ToRow[0]
                                  <Database.SQLite.Simple.Types.Only [GHC.Types.Char]>_N))
                        ipv5
                        ww1
                        ww2
                        ww3
                        Main.main5
                          `cast`
                        (Sym (Database.SQLite.Simple.Types.N:Only[0] <GHC.Base.String>_R))
                        Database.SQLite.Simple.execute2
                          `cast`
                        (<Database.SQLite.Simple.Statement>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Data.Text.Show.unpackCString#
                        "SELECT * from test"# of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Database.SQLite.Simple.$wqueryWith_
                        @ Main.TestField
                        Main.$fFromRowTestField1
                          `cast`
                        (Trans
                             (<Database.SQLite.Simple.Internal.RowParseRO>_R
                              ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                            <(GHC.Types.Int, [Database.SQLite3.SQLData])>_N
                                            <Database.SQLite.Simple.Ok.Ok>_R
                                            <Main.TestField>_N))
                             (Trans
                                  (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                            <*>_N
                                            <Database.SQLite.Simple.Internal.RowParseRO>_R
                                            <Control.Monad.Trans.State.Strict.StateT
                                               (GHC.Types.Int, [Database.SQLite3.SQLData])
                                               Database.SQLite.Simple.Ok.Ok>_R
                                            <Main.TestField>_N))
                                  (Sym (Database.SQLite.Simple.Internal.N:RowParser[0]) <Main.TestField>_N)))
                        ipv5
                        ww5
                        ww6
                        ww7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case Main.main4 ipv9 ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 Database.SQLite3.close1
                   ipv5 `cast` (Database.SQLite.Simple.Internal.N:Connection[0])
                   ipv10 } } } } } } } }) -}
42e10322d56aa071323efa076f2cc331
  main4 ::
    [Main.TestField]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
06b629fc65d0ba682b4d6b6cf466fa37
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test string 2"#) -}
2071b15e011ee43d6fd851fb856e8f46
  main6 ::
    Database.SQLite.Simple.Types.Only [GHC.Types.Char]
    -> [Database.SQLite3.SQLData]
  {- Arity: 1,
     Unfolding: (\ (ds :: Database.SQLite.Simple.Types.Only
                            [GHC.Types.Char])[OneShot] ->
                 GHC.Types.:
                   @ Database.SQLite3.SQLData
                   (case GHC.Magic.runRW#
                           @ 'GHC.Types.PtrRepLifted
                           @ Data.Text.Internal.Text
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   8#
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            Main.$wouter
                              (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                              Main.main7
                              ds
                                `cast`
                              (Database.SQLite.Simple.Types.N:Only[0] <[GHC.Types.Char]>_R)
                              0#
                              ipv }) of ds1 { (#,#) ipv ipv1 ->
                    case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                    Database.SQLite3.SQLText dt } })
                   (GHC.Types.[] @ Database.SQLite3.SQLData)) -}
49fdfb59bff61754f978a35a6dedaf1b
  main7 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4#) -}
f9e8301aa1db676b4cd27ec9aed47d44
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sqlite/test.db"#) -}
0df291f525e44d8e7845113208b32da5
  main9 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><L,U>x -}
instance Database.SQLite.Simple.FromRow.FromRow [Main.TestField]
  = Main.$fFromRowTestField
instance GHC.Show.Show [Main.TestField] = Main.$fShowTestField
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

